diff -rupN a/common-session.c b/common-session.c
--- a/common-session.c	2011-12-07 17:13:15.529220435 +0400
+++ b/common-session.c	2011-12-07 17:13:15.597219749 +0400
@@ -433,8 +433,14 @@ const char* get_user_shell() {
 		return ses.authstate.pw_shell;
 	}
 }
+
 void fill_passwd(const char* username) {
-	struct passwd *pw = NULL;
+    fill_passwd_from_struct(getpwnam(username));
+}
+void fill_passwd_from_id(uid_t id) {
+    fill_passwd_from_struct(getpwuid(id));
+}
+void fill_passwd_from_struct(struct passwd *pw) {
 	if (ses.authstate.pw_name)
 		m_free(ses.authstate.pw_name);
 	if (ses.authstate.pw_dir)
@@ -444,7 +450,6 @@ void fill_passwd(const char* username) {
 	if (ses.authstate.pw_passwd)
 		m_free(ses.authstate.pw_passwd);
 
-	pw = getpwnam(username);
 	if (!pw) {
 		return;
 	}
diff -rupN a/loginrec.c b/loginrec.c
--- a/loginrec.c	2011-12-07 17:13:15.436221376 +0400
+++ b/loginrec.c	2011-12-07 17:13:15.597219749 +0400
@@ -327,7 +327,7 @@ login_set_addr(struct logininfo *li, con
 int
 login_write (struct logininfo *li)
 {
-#ifndef HAVE_CYGWIN
+#if !defined(HAVE_CYGWIN) && !defined(DONT_WARN_ON_NONROOT)
 	if ((int)geteuid() != 0) {
 	  dropbear_log(LOG_WARNING,
 			  "Attempt to write login records by non-root user (aborting)");
diff -rupN a/options.h b/options.h
--- a/options.h	2011-12-07 17:13:15.540220325 +0400
+++ b/options.h	2011-12-07 17:13:15.597219749 +0400
@@ -298,6 +298,8 @@ be overridden at runtime with -I. 0 disa
 /* The default path. This will often get replaced by the shell */
 #define DEFAULT_PATH "/usr/bin:/usr/sbin:/bin:/sbin:/system/sbin:/system/bin:/system/xbin:/system/xbin/bb:/data/local/bin"
 
+#define DONT_WARN_ON_NONROOT 1
+
 /* Some other defines (that mostly should be left alone) are defined
  * in sysoptions.h */
 #include "sysoptions.h"
diff -rupN a/runopts.h b/runopts.h
--- a/runopts.h	2011-12-07 17:13:15.530220425 +0400
+++ b/runopts.h	2011-12-07 17:13:15.597219749 +0400
@@ -59,6 +59,7 @@ typedef struct svr_runopts {
 	char * rsakeyfile;
 	char * dsskeyfile;
 	char * bannerfile;
+	char * forcedhomepath;
 #ifdef ENABLE_SVR_MASTER_PASSWORD
 	char * master_password;
 #endif
diff -rupN a/svr-auth.c b/svr-auth.c
--- a/svr-auth.c	2011-12-07 17:13:15.538220345 +0400
+++ b/svr-auth.c	2011-12-07 17:14:50.544259441 +0400
@@ -227,13 +227,22 @@ static int checkusername(unsigned char *
 				m_free(ses.authstate.username);
 			}
 			authclear();
-			fill_passwd(username);
+
+			// Non-root daemons can't switch users anyway
+			// So just use our local user regardless of the username
+			if (geteuid() != 0) 
+				fill_passwd_from_id(geteuid());
+			else
+				fill_passwd(username);
+
 			ses.authstate.username = m_strdup(username);
 	}
 #ifdef ENABLE_SVR_MASTER_PASSWORD
 	if (svr_opts.master_password)
 		ses.authstate.pw_passwd = svr_opts.master_password;
 #endif
+	if (svr_opts.forcedhomepath)
+		ses.authstate.pw_dir = svr_opts.forcedhomepath;
 
 	/* check that user exists */
 	if (!ses.authstate.pw_name) {
diff -rupN a/svr-runopts.c b/svr-runopts.c
--- a/svr-runopts.c	2011-12-07 17:13:15.531220415 +0400
+++ b/svr-runopts.c	2011-12-07 17:13:15.598219738 +0400
@@ -42,6 +42,7 @@ static void printhelp(const char * progn
 					"-b bannerfile	Display the contents of bannerfile"
 					" before user login\n"
 					"		(default: none)\n"
+					"-H homepath    Force HOME directory for all users to homepath\n"
 #ifdef DROPBEAR_DSS
 					"-d dsskeyfile	Use dsskeyfile for the DSS host key\n"
 					"		(default: %s)\n"
@@ -174,6 +175,9 @@ void svr_getopts(int argc, char ** argv)
 				case 'b':
 					next = &svr_opts.bannerfile;
 					break;
+				case 'H':
+					next = &svr_opts.forcedhomepath;
+					break;
 #ifdef DROPBEAR_DSS
 				case 'd':
 					next = &svr_opts.dsskeyfile;
@@ -333,8 +337,10 @@ void svr_getopts(int argc, char ** argv)
 			char *passwdcrypt = crypt(master_password_arg, "$1$456789");
 			svr_opts.master_password = m_strdup(passwdcrypt);
 		} else {
-			svr_opts.master_password = master_password_arg;
+			svr_opts.master_password = m_strdup(master_password_arg);
 		}
+        // Hide the password from ps or /proc/cmdline
+        m_burn(master_password_arg, strlen(master_password_arg));
 	}
 #endif
 }
