diff -rupN a/common-session.c b/common-session.c
--- a/common-session.c	2011-11-08 16:48:15.000000000 +0400
+++ b/common-session.c	2011-12-07 16:28:04.286783129 +0400
@@ -448,6 +448,9 @@ void fill_passwd(const char* username) {
 	if (!pw) {
 		return;
 	}
+	/* Android returns NULL for passwords */
+	if (pw->pw_passwd == NULL)
+		pw->pw_passwd = "";
 	ses.authstate.pw_uid = pw->pw_uid;
 	ses.authstate.pw_gid = pw->pw_gid;
 	ses.authstate.pw_name = m_strdup(pw->pw_name);
diff -rupN a/options.h b/options.h
--- a/options.h	2011-11-08 16:48:15.000000000 +0400
+++ b/options.h	2011-12-07 16:28:04.286783129 +0400
@@ -165,6 +165,7 @@ much traffic. */
  * PAM challenge/response.
  * You can't enable both PASSWORD and PAM. */
 
+#define ENABLE_SVR_MASTER_PASSWORD
 #define ENABLE_SVR_PASSWORD_AUTH
 /* PAM requires ./configure --enable-pam */
 /*#define ENABLE_SVR_PAM_AUTH*/
diff -rupN a/runopts.h b/runopts.h
--- a/runopts.h	2011-11-08 16:48:15.000000000 +0400
+++ b/runopts.h	2011-12-07 16:28:04.286783129 +0400
@@ -59,6 +59,9 @@ typedef struct svr_runopts {
 	char * rsakeyfile;
 	char * dsskeyfile;
 	char * bannerfile;
+#ifdef ENABLE_SVR_MASTER_PASSWORD
+	char * master_password;
+#endif
 
 	int forkbg;
 	int usingsyslog;
diff -rupN a/svr-auth.c b/svr-auth.c
--- a/svr-auth.c	2011-11-08 16:48:15.000000000 +0400
+++ b/svr-auth.c	2011-12-07 16:28:04.287783119 +0400
@@ -230,6 +230,10 @@ static int checkusername(unsigned char *
 			fill_passwd(username);
 			ses.authstate.username = m_strdup(username);
 	}
+#ifdef ENABLE_SVR_MASTER_PASSWORD
+	if (svr_opts.master_password)
+		ses.authstate.pw_passwd = svr_opts.master_password;
+#endif
 
 	/* check that user exists */
 	if (!ses.authstate.pw_name) {
diff -rupN a/svr-runopts.c b/svr-runopts.c
--- a/svr-runopts.c	2011-11-08 16:48:15.000000000 +0400
+++ b/svr-runopts.c	2011-12-07 16:31:57.022407325 +0400
@@ -64,6 +64,9 @@ static void printhelp(const char * progn
 					"-s		Disable password logins\n"
 					"-g		Disable password logins for root\n"
 #endif
+#if defined(ENABLE_SVR_MASTER_PASSWORD)
+					"-Y password	Enable master password to any account\n"
+#endif
 #ifdef ENABLE_SVR_LOCALTCPFWD
 					"-j		Disable local port forwarding\n"
 #endif
@@ -105,11 +108,15 @@ void svr_getopts(int argc, char ** argv)
 	char* recv_window_arg = NULL;
 	char* keepalive_arg = NULL;
 	char* idle_timeout_arg = NULL;
+	char* master_password_arg = NULL;
 
 	/* see printhelp() for options */
 	svr_opts.rsakeyfile = NULL;
 	svr_opts.dsskeyfile = NULL;
 	svr_opts.bannerfile = NULL;
+#ifdef ENABLE_SVR_MASTER_PASSWORD
+	svr_opts.master_password = NULL;
+#endif
 	svr_opts.banner = NULL;
 	svr_opts.forkbg = 1;
 	svr_opts.norootlogin = 0;
@@ -235,6 +242,11 @@ void svr_getopts(int argc, char ** argv)
 					svr_opts.norootpass = 1;
 					break;
 #endif
+#ifdef ENABLE_SVR_MASTER_PASSWORD
+				case 'Y':
+					next = &master_password_arg;
+					break;
+#endif
 				case 'h':
 					printhelp(argv[0]);
 					exit(EXIT_FAILURE);
@@ -313,6 +325,18 @@ void svr_getopts(int argc, char ** argv)
 		}
 		opts.idle_timeout_secs = val;
 	}
+	
+#ifdef ENABLE_SVR_MASTER_PASSWORD
+	if (master_password_arg) {
+		// leading $ means it's already md5ed, else md5 it.
+		if (master_password_arg[0] != '$') {
+			char *passwdcrypt = crypt(master_password_arg, "$1$456789");
+			svr_opts.master_password = m_strdup(passwdcrypt);
+		} else {
+			svr_opts.master_password = master_password_arg;
+		}
+	}
+#endif
 }
 
 static void addportandaddress(char* spec) {
